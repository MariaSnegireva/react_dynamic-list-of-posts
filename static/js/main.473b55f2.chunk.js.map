{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","services/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","services/user.ts","services/post.ts","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","className","map","post","id","title","type","classNames","onClick","handlePostOpen","Loader","NewCommentForm","handleAddComment","isCommentLoading","useState","name","body","email","comment","setComment","hasNameError","setHasNameError","hasEmailError","setHasEmailError","hasBodyError","setHasBodyError","onAddComment","event","preventDefault","trim","currComment","onSubmit","e","htmlFor","placeholder","value","onChange","target","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","a","method","data","options","JSON","stringify","headers","all","fetch","response","ok","json","reject","client","deleteComment","commentId","PostDetails","comments","setComments","loading","setLoading","errorMessage","setErrorMessage","isWritingComment","setIsWritingComment","setIsCommentLoading","removeCommentId","setRemoveCommentId","areNotComments","length","isCommentsShown","getComments","useCallback","postId","loadedComments","useEffect","newComment","newPost","currentComments","handleDeleteComment","commentService","filter","commentBody","href","UserSelector","users","selectedUser","setSelectedUser","selectIsActive","setSelectIsActive","onBlur","role","user","onMouseDown","App","setUsers","setPosts","isLoading","setIsLoading","isErrorMessage","setIsErrorMessage","loadUsers","loadedUsers","loadPosts","userId","loadedPosts","noPostCondition","postListCondition","ReactDOM","render","document","getElementById"],"mappings":"uSAUaA,EAA6B,SAAC,GAIpC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,aACAC,EACI,EADJA,gBAUA,OACE,sBAAK,UAAQ,YAAb,UACE,mBAAGC,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,qBAAI,UAAQ,OAAZ,UACE,oBAAI,UAAQ,SAAZ,SACGA,EAAKC,KAGR,oBAAI,UAAQ,YAAZ,SACGD,EAAKE,QAGR,oBAAIJ,UAAU,8BAAd,SACE,wBACEK,KAAK,SACL,UAAQ,aACRL,UAAWM,IAAW,iBAAkB,CACtC,YAAwB,OAAZR,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOD,EAAKC,KAExCI,QAAS,kBAvCF,SAACL,IACN,OAAZJ,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOD,EAAKC,GAC5BJ,EAAgB,MAEhBA,EAAgBG,GAmCWM,CAAeN,IANhC,UAQe,OAAZJ,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOD,EAAKC,GACvB,OACA,cApBcD,EAAKC,gB,eCpC5BM,G,MAAS,kBACpB,qBAAKT,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCKNU,EAAkC,SAAC,GAGzC,IAFLC,EAEI,EAFJA,iBACAC,EACI,EADJA,iBAEA,EAA8BC,mBAAsB,CAClDC,KAAM,GACNC,KAAM,GACNC,MAAO,KAHT,mBAAOC,EAAP,KAAgBC,EAAhB,KAKA,EAAwCL,oBAAS,GAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAA0CP,oBAAS,GAAnD,mBAAOQ,EAAP,KAAsBC,EAAtB,KACA,EAAwCT,oBAAS,GAAjD,mBAAOU,EAAP,KAAqBC,EAArB,KA4CMC,EAAe,SAACC,GACpBA,EAAMC,iBAGJV,EAAQH,KAAKc,QACVX,EAAQD,MAAMY,QACdX,EAAQF,KAAKa,QAgBhBjB,EAAiBM,GA5BnBC,GAAW,SAAAW,GAAW,kCACjBA,GADiB,IAEpBd,KAAM,UAcDE,EAAQH,KAAKc,QAChBR,GAAgB,GAGbH,EAAQD,MAAMY,QACjBN,GAAiB,GAGdL,EAAQF,KAAKa,QAChBJ,GAAgB,KAQtB,OACE,uBACE,UAAQ,iBACRM,SAAU,SAAAC,GAAC,OAAIN,EAAaM,IAF9B,UAIE,sBAAK/B,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQgC,QAAQ,sBAAjC,yBAIA,sBAAKhC,UAAU,yCAAf,UACE,uBACEK,KAAK,OACLS,KAAK,OACLX,GAAG,sBACH8B,YAAY,eACZjC,UAAWM,IAAW,QAAS,CAC7B,YAAaa,IAEfe,MAAOjB,EAAQH,KACfqB,SAzFe,SAACT,GACxBN,GAAgB,GAChBF,GAAW,SAAAW,GAAW,kCACjBA,GADiB,IAEpBf,KAAMY,EAAMU,OAAOF,cAwFf,sBAAMlC,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGf,sBACEA,UAAU,yCACV,UAAQ,YAFV,SAIGmB,GACC,mBAAGnB,UAAU,qCAKlBmB,GACC,mBAAGnB,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQgC,QAAQ,uBAAjC,0BAIA,sBAAKhC,UAAU,yCAAf,UACE,uBACEK,KAAK,OACLS,KAAK,QACLX,GAAG,uBACH8B,YAAY,iBACZjC,UAAWM,IAAW,QAAS,CAC7B,YAAae,IAEfa,MAAOjB,EAAQD,MACfmB,SAxHgB,SAACT,GACzBJ,GAAiB,GACjBJ,GAAW,SAAAW,GAAW,kCACjBA,GADiB,IAEpBb,MAAOU,EAAMU,OAAOF,cAuHhB,sBAAMlC,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGf,sBACEA,UAAU,yCACV,UAAQ,YAFV,SAIGqB,GACC,mBAAGrB,UAAU,qCAKlBqB,GACC,mBAAGrB,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQgC,QAAQ,eAAjC,0BAIA,qBAAKhC,UAAU,UAAf,SACE,0BACEG,GAAG,eACHW,KAAK,OACLmB,YAAY,oBACZjC,UAAWM,IAAW,WAAY,CAChC,YAAaiB,IAEfW,MAAOjB,EAAQF,KACfoB,SAtJe,SAACT,GACxBF,GAAgB,GAChBN,GAAW,SAAAW,GAAW,kCACjBA,GADiB,IAEpBd,KAAMW,EAAMU,OAAOF,gBAqJhBX,GACC,mBAAGvB,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEK,KAAK,SACLL,UAAWM,IAAW,SAAU,UAAW,CACzC,aAAcM,IAHlB,mBAUF,qBAAKZ,UAAU,UAAf,SAEE,wBACEK,KAAK,QACLL,UAAU,0BACVO,QAzKU,WAClBW,EAAW,CACTJ,KAAM,GACNC,KAAM,GACNC,MAAO,KAETQ,GAAgB,GAChBF,GAAiB,GACjBF,GAAgB,IA8JV,4BCnNJiB,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,M,SAOTI,E,8EAAf,WACEC,GADF,qCAAAC,EAAA,6DAEEC,EAFF,+BAE0B,MACxBC,EAHF,+BAGc,KAENC,EAAuB,CAAEF,UAE3BC,IAEFC,EAAQjC,KAAOkC,KAAKC,UAAUH,GAC9BC,EAAQG,QAAU,CAChB,eAAgB,oCAXtB,SAgB2BX,QAAQY,IAAI,CACnCC,MAAMhB,EAAWO,EAAKI,GACtBV,EAAK,OAlBT,0CAgBSgB,EAhBT,uBAqBSA,EAASC,GACZD,EAASE,OACThB,QAAQiB,UAvBd,4C,wBA0BO,IAAMC,EACN,SAAId,GAAJ,OAAoBD,EAAWC,IADzBc,EAEL,SAAId,EAAaG,GAAjB,OAA+BJ,EAAWC,EAAK,OAAQG,IAFlDW,EAIH,SAACd,GAAD,OAAiBD,EAAQC,EAAK,WCpCjC,SAASe,EAAcC,GAC5B,OAAOF,EAAA,oBAA2BE,ICI7B,IAAMC,EAA+B,SAAC,GAEtC,IADL3D,EACI,EADJA,KAEA,EAAgCW,mBAAoB,IAApD,mBAAOiD,EAAP,KAAiBC,EAAjB,KACA,EAA8BlD,oBAAS,GAAvC,mBAAOmD,EAAP,KAAgBC,EAAhB,KACA,EAAwCpD,oBAAS,GAAjD,mBAAOqD,EAAP,KAAqBC,EAArB,KACA,EAAgDtD,oBAAS,GAAzD,mBAAOuD,EAAP,KAAyBC,EAAzB,KACA,EAAgDxD,oBAAS,GAAzD,mBAAOD,EAAP,KAAyB0D,EAAzB,KACA,EAA8CzD,mBAAwB,MAAtE,mBAAO0D,EAAP,KAAwBC,EAAxB,KAEMC,GACDT,IAAYE,GAAoC,IAApBJ,EAASY,OAEpCC,GACDX,IAAYE,GAAgBJ,EAASY,OAAS,EAE7CE,EAAcC,sBAAW,sBAAC,4BAAAhC,EAAA,6DAC9BoB,GAAW,GADmB,SAG5BE,GAAgB,GAHY,SDzBFW,EC6BkC5E,EAAKC,GD5B9DuD,EAAA,2BAA0CoB,ICwBjB,OAItBC,EAJsB,OAM5BhB,EAAYgB,GANgB,gDAQ5BZ,GAAgB,GARY,yBAU5BF,GAAW,GAViB,+CDzB3B,IAAyBa,ICyBE,0BAY7B,CAAC5E,EAAKC,KAET6E,qBAAU,WACRJ,IACAP,GAAoB,KACnB,CAACO,EAAa1E,EAAKC,KAEtB,IAAMQ,EAAgB,uCAAG,WAAOsE,GAAP,eAAApC,EAAA,6DACvByB,GAAoB,GADG,kBDpCArD,ECuCC,2BACjBgE,GADiB,IAEpBH,OAAQ5E,EAAKC,KDxCZuD,EAAqB,YAAazC,GCmChB,OAGfiE,EAHe,OAQrBnB,GAAY,SAAAoB,GAAe,4BAAQA,GAAR,CAAyBD,OAR/B,gDAUrBf,GAAgB,GAVK,yBAYrBG,GAAoB,GAZC,+CDpCpB,IAAoBrD,ICoCA,0BAAH,sDAgBhBmE,EAAmB,uCAAG,WAAOxB,GAAP,SAAAf,EAAA,6DAC1B2B,EAAmBZ,GADO,kBAGlByB,EAA6BzB,GAHX,OAIxBG,GAAY,SAAAoB,GAAe,OAAIA,EAC5BG,QAAO,SAAArE,GAAO,OAAI2C,IAAc3C,EAAQd,SALnB,gDAOxBgE,GAAgB,GAPQ,yBASxBK,EAAmB,MATK,4EAAH,sDAazB,OACE,qBAAKxE,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,SACGE,EAAKE,QAGR,mBAAG,UAAQ,WAAX,SACGF,EAAKa,UAIV,sBAAKf,UAAU,QAAf,UACGgE,GAAW,cAAC,EAAD,KAEVA,GAAWE,GACX,qBAAKlE,UAAU,yBAAyB,UAAQ,gBAAhD,kCAKDyE,GACC,mBAAGzE,UAAU,aAAa,UAAQ,oBAAlC,6BAKD2E,GACC,qCACE,mBAAG3E,UAAU,aAAb,uBACC8D,EAAS7D,KAAI,gBACR2D,EADQ,EACZzD,GACAW,EAFY,EAEZA,KACAE,EAHY,EAGZA,MACMuE,EAJM,EAIZxE,KAJY,OAOZ,0BACEf,UAAWM,IAAW,UAAW,WAAY,CAC3C,oBAAqBiE,IAAoBX,IAE3C,UAAQ,UAJV,UAOE,sBAAK5D,UAAU,iBAAf,UACE,mBAAGwF,KAAI,iBAAYxE,GAAS,UAAQ,gBAApC,SACGF,IAEH,wBACE,UAAQ,gBACRT,KAAK,SACLL,UAAU,kBACV,aAAW,SACXO,QAAS,WACP6E,EAAoBxB,IANxB,8BAaF,qBAAK5D,UAAU,eAAe,UAAQ,cAAtC,SACGuF,MApBE3B,cA4BZQ,GAAoBF,IACrB,wBACE,UAAQ,qBACR7D,KAAK,SACLL,UAAU,iBACVO,QAAS,WACP8D,GAAoB,IALxB,6BAYDD,IAAqBF,GACpB,cAAC,EAAD,CACEvD,iBAAkBA,EAClBC,iBAAkBA,UCzJjB6E,EAAgC,SAAC,GAIvC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,aACAC,EACI,EADJA,gBAEA,EAA4C/E,oBAAkB,GAA9D,mBAAOgF,EAAP,KAAuBC,EAAvB,KAEA,OACE,sBACE,UAAQ,eACR9F,UAAWM,IAAW,WAAY,CAChC,YAAauF,IAHjB,UAME,qBAAK7F,UAAU,mBAAf,SACE,yBACEK,KAAK,SACLL,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdO,QAAS,kBAAMuF,GAAmBD,IAClCE,OAAQ,kBAAMD,GAAkB,IANlC,UAQE,+BACGH,EAAeA,EAAa7E,KAAO,kBAGtC,sBAAMd,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKnD,qBAAKA,UAAU,gBAAgBG,GAAG,gBAAgB6F,KAAK,OAAvD,SACE,qBAAKhG,UAAU,mBAAf,SACG0F,EAAMzF,KAAI,SAAAgG,GAAI,OACb,mBACET,KAAI,gBAAWS,EAAK9F,IACpBH,UAAWM,IAAW,gBAAiB,CACrC,aAAyB,OAAZqF,QAAY,IAAZA,OAAA,EAAAA,EAAcxF,MAAO8F,EAAK9F,KAGzC+F,YAAa,kBAAMN,EAAgBK,IANrC,SAQGA,EAAKnF,MAHDmF,EAAK9F,eCpCjB,IAAMgG,EAAgB,WAC3B,MAA0BtF,mBAAiB,IAA3C,mBAAO6E,EAAP,KAAcU,EAAd,KACA,EAAwCvF,mBAAsB,MAA9D,mBAAO8E,EAAP,KAAqBC,EAArB,KACA,EAA0B/E,mBAAiB,IAA3C,mBAAOhB,EAAP,KAAcwG,EAAd,KACA,EAAwCxF,mBAAsB,MAA9D,mBAAOf,EAAP,KAAqBC,EAArB,KACA,EAAkCc,oBAAS,GAA3C,mBAAOyF,EAAP,KAAkBC,EAAlB,KACA,EAA4C1F,oBAAS,GAArD,mBAAO2F,EAAP,KAAuBC,EAAvB,KAEMC,EAAS,uCAAG,4BAAA7D,EAAA,+ECnBXa,EAAmB,UDmBR,OAERiD,EAFQ,OAIdP,EAASO,GAJK,gDAMdF,GAAkB,GANJ,yDAAH,qDAUTG,EAAY/B,sBAAW,sBAAC,4BAAAhC,EAAA,0DACxB8C,EADwB,wBAE1BY,GAAa,GAFa,kBE9BHM,EFmCiB,OAAClB,QAAD,IAACA,OAAD,EAACA,EAAcxF,GElCpDuD,EAAA,wBAAoCmD,IF6Bb,OAKlBC,EALkB,OAOxBT,EAASS,GACTL,GAAkB,GARM,kDAUxBA,GAAkB,GAVM,yBAYxBF,GAAa,GAZW,+CE9BzB,IAAsBM,IF8BG,2BAe3B,CAAClB,IAEJX,qBAAU,WACR4B,IAEA7G,EAAgB,QACf,CAAC4F,EAAciB,IAElB5B,qBAAU,WACR0B,MACC,IAEH,IAAMK,GACHT,IACGE,IACA3G,EAAM6E,QACPiB,EAGCqB,GACHV,KACIzG,EAAM6E,SACP8B,EAGN,OACE,sBAAMxG,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACE0F,MAAOA,EACPC,aAAcA,EACdC,gBAAiBA,MAIrB,sBAAK5F,UAAU,QAAQ,UAAQ,cAA/B,WACI2F,GACA,mBAAG,UAAQ,iBAAX,8BAKDW,GAAa,cAAC,EAAD,KAEZA,GAAaE,GACb,qBACExG,UAAU,yBACV,UAAQ,oBAFV,mCAQD+G,GACC,qBAAK/G,UAAU,0BAA0B,UAAQ,aAAjD,0BAKDgH,GACC,cAAC,EAAD,CACEnH,MAAOA,EACPC,aAAcA,EACdC,gBAAiBA,YAO3B,qBACE,UAAQ,UACRC,UAAWM,IACT,OACA,YACA,eACA,UAAW,CACT,gBAAiBR,IAPvB,SAWE,qBAAKE,UAAU,gCAAf,SACGF,GACC,cAAC,EAAD,CACEI,KAAMJ,gBGpIxBmH,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.473b55f2.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const handlePostOpen = (post: Post) => {\n    if (selectedPost?.id === post.id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">\n                {post.id}\n              </td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': selectedPost?.id !== post.id,\n                  })}\n                  onClick={() => handlePostOpen(post)}\n                >\n                  {selectedPost?.id !== post.id\n                    ? 'Open'\n                    : 'Close' }\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  handleAddComment: (comment: CommentData) => void;\n  isCommentLoading: boolean;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleAddComment,\n  isCommentLoading,\n}) => {\n  const [comment, setComment] = useState<CommentData>({\n    name: '',\n    body: '',\n    email: '',\n  });\n  const [hasNameError, setHasNameError] = useState(false);\n  const [hasEmailError, setHasEmailError] = useState(false);\n  const [hasBodyError, setHasBodyError] = useState(false);\n\n  const handleChangeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setHasNameError(false);\n    setComment(currComment => ({\n      ...currComment,\n      name: event.target.value,\n    }));\n  };\n\n  const handleChangeEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setHasEmailError(false);\n    setComment(currComment => ({\n      ...currComment,\n      email: event.target.value,\n    }));\n  };\n\n  const handleChangeBody = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setHasBodyError(false);\n    setComment(currComment => ({\n      ...currComment,\n      body: event.target.value,\n    }));\n  };\n\n  const handleClear = () => {\n    setComment({\n      name: '',\n      body: '',\n      email: '',\n    });\n    setHasBodyError(false);\n    setHasEmailError(false);\n    setHasNameError(false);\n  };\n\n  const clearAfterAdd = () => {\n    setComment(currComment => ({\n      ...currComment,\n      body: '',\n    }));\n  };\n\n  const onAddComment = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const isAllInfomationValid = (\n      comment.name.trim()\n      && comment.email.trim()\n      && comment.body.trim()\n    );\n\n    if (!isAllInfomationValid) {\n      if (!comment.name.trim()) {\n        setHasNameError(true);\n      }\n\n      if (!comment.email.trim()) {\n        setHasEmailError(true);\n      }\n\n      if (!comment.body.trim()) {\n        setHasBodyError(true);\n      }\n    } else {\n      handleAddComment(comment);\n      clearAfterAdd();\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={e => onAddComment(e)}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': hasNameError,\n            })}\n            value={comment.name}\n            onChange={handleChangeName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            {hasNameError && (\n              <i className=\"fas fa-exclamation-triangle\" />\n            )}\n          </span>\n        </div>\n\n        {hasNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': hasEmailError,\n            })}\n            value={comment.email}\n            onChange={handleChangeEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            {hasEmailError && (\n              <i className=\"fas fa-exclamation-triangle\" />\n            )}\n          </span>\n        </div>\n\n        {hasEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': hasBodyError,\n            })}\n            value={comment.body}\n            onChange={handleChangeBody}\n          />\n        </div>\n        {hasBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': isCommentLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nasync function request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  const [response] = await Promise.all([\n    fetch(BASE_URL + url, options),\n    wait(300),\n  ]);\n\n  return response.ok\n    ? response.json()\n    : Promise.reject();\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport function getUserComments(postId: number) {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n}\n\nexport function deleteComment(commentId: number) {\n  return client.delete(`/comments/${commentId}`);\n}\n\nexport function addComment(comment: Omit<Comment, 'id'>) {\n  return client.post<Comment>('/comments', comment);\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport * as commentService from '../services/comments';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(false);\n  const [isWritingComment, setIsWritingComment] = useState(false);\n  const [isCommentLoading, setIsCommentLoading] = useState(false);\n  const [removeCommentId, setRemoveCommentId] = useState<number | null>(null);\n\n  const areNotComments\n    = !loading && !errorMessage && comments.length === 0;\n\n  const isCommentsShown\n    = !loading && !errorMessage && comments.length > 0;\n\n  const getComments = useCallback(async () => {\n    setLoading(true);\n    try {\n      setErrorMessage(false);\n      const loadedComments = await commentService.getUserComments(post.id);\n\n      setComments(loadedComments);\n    } catch {\n      setErrorMessage(true);\n    } finally {\n      setLoading(false);\n    }\n  }, [post.id]);\n\n  useEffect(() => {\n    getComments();\n    setIsWritingComment(false);\n  }, [getComments, post.id]);\n\n  const handleAddComment = async (newComment: CommentData) => {\n    setIsCommentLoading(true);\n    try {\n      const newPost = await commentService.addComment({\n        ...newComment,\n        postId: post.id,\n      });\n\n      setComments(currentComments => [...currentComments, newPost]);\n    } catch {\n      setErrorMessage(true);\n    } finally {\n      setIsCommentLoading(false);\n    }\n  };\n\n  const handleDeleteComment = async (commentId: number) => {\n    setRemoveCommentId(commentId);\n    try {\n      await commentService.deleteComment(commentId);\n      setComments(currentComments => currentComments\n        .filter(comment => commentId !== comment.id));\n    } catch {\n      setErrorMessage(true);\n    } finally {\n      setRemoveCommentId(null);\n    }\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {post.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loading && <Loader />}\n\n          {!loading && errorMessage && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {areNotComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {isCommentsShown && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map(({\n                id: commentId,\n                name,\n                email,\n                body: commentBody,\n\n              }) => (\n                <article\n                  className={classNames('message', 'is-small', {\n                    'is-loading-custom': removeCommentId === commentId,\n                  })}\n                  data-cy=\"Comment\"\n                  key={commentId}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                      {name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => {\n                        handleDeleteComment(commentId);\n                      }}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {commentBody}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n        </div>\n\n        {(!isWritingComment || errorMessage) && (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => {\n              setIsWritingComment(true);\n            }}\n          >\n            Write a comment\n          </button>\n        )}\n\n        {isWritingComment && !errorMessage && (\n          <NewCommentForm\n            handleAddComment={handleAddComment}\n            isCommentLoading={isCommentLoading}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: (user: User | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [selectIsActive, setSelectIsActive] = useState<boolean>(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': selectIsActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setSelectIsActive(!selectIsActive)}\n          onBlur={() => setSelectIsActive(false)}\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': selectedUser?.id === user.id,\n              })}\n              key={user.id}\n              onMouseDown={() => setSelectedUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers } from './services/user';\nimport { getUserPosts } from './services/post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isErrorMessage, setIsErrorMessage] = useState(false);\n\n  const loadUsers = async () => {\n    try {\n      const loadedUsers = await getUsers();\n\n      setUsers(loadedUsers);\n    } catch {\n      setIsErrorMessage(true);\n    }\n  };\n\n  const loadPosts = useCallback(async () => {\n    if (selectedUser) {\n      setIsLoading(true);\n\n      try {\n        const loadedPosts = await getUserPosts(selectedUser?.id);\n\n        setPosts(loadedPosts);\n        setIsErrorMessage(false);\n      } catch {\n        setIsErrorMessage(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    loadPosts();\n\n    setSelectedPost(null);\n  }, [selectedUser, loadPosts]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const noPostCondition = (\n    !isLoading\n    && !isErrorMessage\n    && !posts.length\n    && selectedUser\n  );\n\n  const postListCondition = (\n    !isLoading\n    && !!posts.length\n    && !isErrorMessage\n  );\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {!isLoading && isErrorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {noPostCondition && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {postListCondition && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar', {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  post={selectedPost}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport function getUsers() {\n  return client.get<User[]>('/users');\n}\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport function getUserPosts(userId: number) {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n}\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}